<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/maximilianolopezsalgado/data_projects/superstore_e-commerce/sql-eda/superstore_db.db" readonly="0" foreign_keys="" case_sensitive_like="" temp_store="" wal_autocheckpoint="" synchronous=""/><attached/><window><main_tabs open="structure browser pragmas query" current="1"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1500"/><column_width id="4" width="0"/></tab_structure><tab_browse><current_table name="0,0:"/><default_encoding codec=""/><browse_table_settings/></tab_browse><tab_sql><sql name="SQL 1">-- Select unique values of the tables 
-- Create a new table called customer_unique, copy the the unique content of customer and then drop it and change the name of it to customer  
CREATE TABLE customer_unique AS SELECT DISTINCT * FROM customer;
DROP TABLE customer;
ALTER TABLE customer_unique RENAME TO customer;

-- Create a new table called product_unique, copy the the unique content of product and then drop it and change the name of it to customer  
CREATE TABLE product_unique AS SELECT DISTINCT * FROM product;
DROP TABLE product;
ALTER TABLE product_unique RENAME TO product;

-- Create a new table called geolocation_unique, copy the the unique content of  geolocation and then drop it and change the name of it to customer  
CREATE TABLE geolocation_unique AS SELECT DISTINCT * FROM geolocation;
DROP TABLE geolocation;
ALTER TABLE geolocation_unique RENAME TO geolocation;

-- Create a new table called geolocation_unique, copy the the unique content of  geolocation and then drop it and change the name of it to customer  
CREATE TABLE order_unique AS SELECT DISTINCT * FROM &quot;order&quot;;
DROP TABLE &quot;order&quot;;
ALTER TABLE order_unique RENAME TO &quot;order&quot;;

-- Questions to answer:
-- What is the category generating the maximum sales revenue?
SELECT p.category, SUM(s.price * s.quantity) AS total_revenue
FROM &quot;order&quot; o
JOIN product p ON o.product_number = p.product_id
JOIN sale s ON o.transaction_number = s.transaction_id
GROUP BY p.category
ORDER BY total_revenue DESC
LIMIT 1
;

-- What about the profit in this category?
SELECT p.category, SUM(s.profit * s.quantity) AS total_profit
FROM &quot;order&quot; o
JOIN product p ON o.product_number = p.product_id
JOIN sale s ON o.transaction_number = s.transaction_id
GROUP BY p.category
ORDER BY total_profit DESC
LIMIT 1
;

-- Are they making a loss in any categories?
SELECT p.category, SUM(s.price * s.quantity - s.profit) AS total_profit
FROM &quot;order&quot; o
JOIN product p ON o.product_number = p.product_id
JOIN sale s ON o.transaction_number = s.transaction_id
GROUP BY p.category
HAVING total_profit &lt; 0
;

-- What are 5 states generating the maximum and minimum sales revenue?
SELECT g.state, SUM(s.price * s.quantity) AS top5_max_revenue
FROM &quot;order&quot; o
JOIN product p ON o.product_number = p.product_id
JOIN sale s ON o.transaction_number = s.transaction_id
JOIN shipment sh on o.ship_number = sh.ship_id
JOIN geolocation g on sh.geolocation_number = g.geolocation_id 
GROUP BY g.state
ORDER BY top5_max_revenue DESC
LIMIT 5
;

SELECT g.state, SUM(s.price * s.quantity) AS top5_min_revenue
FROM &quot;order&quot; o
JOIN product p ON o.product_number = p.product_id
JOIN sale s ON o.transaction_number = s.transaction_id
JOIN shipment sh on o.ship_number = sh.ship_id
JOIN geolocation g on sh.geolocation_number = g.geolocation_id 
GROUP BY g.state
ORDER BY top5_min_revenue ASC
LIMIT 5
;

-- What are the 3 products in each product segment (CATEGORIES) with the highest sales?
SELECT
    p.category,
	p.&quot;sub-category&quot;,
    p.product_name,
    SUM(s.price * s.quantity) AS sales_amount
FROM
    product AS p
    INNER JOIN &quot;order&quot; AS o ON o.product_number = p.product_id
    INNER JOIN sale AS s ON s.transaction_id = o.transaction_number
WHERE
    p.category = 'Technology'
GROUP BY
    p.product_id
ORDER BY
    sales_amount DESC
LIMIT 3;

SELECT
    p.category,
	p.&quot;sub-category&quot;,
    p.product_name,
    SUM(s.price * s.quantity) AS sales_amount
FROM
    product AS p
    INNER JOIN &quot;order&quot; AS o ON o.product_number = p.product_id
    INNER JOIN sale AS s ON s.transaction_id = o.transaction_number
WHERE
    p.category = 'Furniture'
GROUP BY
    p.product_id
ORDER BY
    sales_amount DESC
LIMIT 3;

SELECT
    p.category,
	p.&quot;sub-category&quot;,
    p.product_name,
    SUM(s.price * s.quantity) AS sales_amount
FROM
    product AS p
    INNER JOIN &quot;order&quot; AS o ON o.product_number = p.product_id
    INNER JOIN sale AS s ON s.transaction_id = o.transaction_number
WHERE
    p.category = 'Office Supplies'
GROUP BY
    p.product_id
ORDER BY
    sales_amount DESC
LIMIT 3;

-- Are they the 3 most profitable products as well?
SELECT
    p.product_name,
    MAX(s.profit) AS max_profit
FROM
    &quot;order&quot; AS o
    JOIN product AS p ON o.product_number = p.product_id
    JOIN sale AS s ON o.transaction_number = s.transaction_id
WHERE
    p.category = 'Technology'
GROUP BY
    p.product_name
ORDER BY
    max_profit DESC
LIMIT 3;

SELECT
    p.product_name,
    MAX(s.profit) AS max_profit
FROM
    &quot;order&quot; AS o
    JOIN product AS p ON o.product_number = p.product_id
    JOIN sale AS s ON o.transaction_number = s.transaction_id
WHERE
    p.category = 'Furniture'
GROUP BY
    p.product_name
ORDER BY
    max_profit DESC
LIMIT 3;

SELECT
    p.product_name,
    MAX(s.profit) AS max_profit
FROM
    &quot;order&quot; AS o
    JOIN product AS p ON o.product_number = p.product_id
    JOIN sale AS s ON o.transaction_number = s.transaction_id
WHERE
    p.category = 'Office Supplies'
GROUP BY
    p.product_name
ORDER BY
    max_profit DESC
LIMIT 3;

-- What are the 3 best-seller products in each product segment (CATEGORY)? (Quantity-wise)
SELECT p.product_name, COUNT(p.product_name) as count_best_sellers
FROM &quot;order&quot; o
JOIN product AS p ON o.product_number = p.product_id
JOIN sale AS s ON o.transaction_number = s.transaction_id
WHERE p.category = 'Technology'
GROUP BY p.product_name
ORDER BY count_best_sellers DESC
LIMIT 3
;

SELECT p.product_name, COUNT(p.product_name) as count_best_sellers
FROM &quot;order&quot; o
JOIN product AS p ON o.product_number = p.product_id
JOIN sale AS s ON o.transaction_number = s.transaction_id
WHERE p.category = 'Furniture'
GROUP BY p.product_name
ORDER BY count_best_sellers DESC
LIMIT 3
;

SELECT p.product_name, COUNT(p.product_name) as count_best_sellers
FROM &quot;order&quot; o
JOIN product AS p ON o.product_number = p.product_id
JOIN sale AS s ON o.transaction_number = s.transaction_id
WHERE p.category = 'Office Supplies'
GROUP BY p.product_name
ORDER BY count_best_sellers DESC
LIMIT 3
;

-- What are the top 3 worst-selling products in every category? (Quantity-wise)
SELECT p.product_name, COUNT(p.product_name) as count_best_sellers
FROM &quot;order&quot; o
JOIN product AS p ON o.product_number = p.product_id
JOIN sale AS s ON o.transaction_number = s.transaction_id
WHERE p.category = 'Technology'
GROUP BY p.product_name
ORDER BY count_best_sellers ASC
LIMIT 3
;

SELECT p.product_name, COUNT(p.product_name) as count_best_sellers
FROM &quot;order&quot; o
JOIN product AS p ON o.product_number = p.product_id
JOIN sale AS s ON o.transaction_number = s.transaction_id
WHERE p.category = 'Furniture'
GROUP BY p.product_name
ORDER BY count_best_sellers ASC
LIMIT 3
;

SELECT p.product_name, COUNT(p.product_name) as count_best_sellers
FROM &quot;order&quot; o
JOIN product AS p ON o.product_number = p.product_id
JOIN sale AS s ON o.transaction_number = s.transaction_id
WHERE p.category = 'Office Supplies'
GROUP BY p.product_name
ORDER BY count_best_sellers ASC
LIMIT 3
;

-- How many unique customers per month are there for the year 2016. (There's a catch here: contrary to other 'heavier' RDBMS, SQLite does not support the functions YEAR() or MONTH() to extract the year or the month in a date. You will have to create two new columns: year and month.)

-- Add year column
ALTER TABLE &quot;order&quot; ADD COLUMN year INTEGER;

-- Add month column
ALTER TABLE &quot;order&quot; ADD COLUMN month INTEGER;

-- Update year and month values
UPDATE &quot;order&quot; SET year = CAST(SUBSTR(order_date, -4) AS INTEGER);
UPDATE &quot;order&quot; SET month = CAST(SUBSTR(order_date, 1, INSTR(order_date, '/') - 1) AS INTEGER);

-- count the number of unique customers per month for the year 2016 using a query:
SELECT month, COUNT(DISTINCT customer_number) AS unique_customers
FROM &quot;order&quot;
WHERE year = 2016
GROUP BY month;
</sql><current_tab id="0"/></tab_sql></sqlb_project>
